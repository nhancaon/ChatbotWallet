import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
import langdetect

# Load API key t·ª´ t·ªáp .env
load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp PDF m·∫∑c ƒë·ªãnh
DEFAULT_PDF_PATH = "BambuUP.pdf"

def detect_language(text):
    try:
        lang = langdetect.detect(text)
        return lang
    except:
        return 'en'  # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ ti·∫øng Anh n·∫øu kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c

def get_pdf_text(pdf_path):
    text = ""
    pdf_reader = PdfReader(pdf_path)
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    return chunks

def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

def get_prompt_by_language(detected_lang):
    prompts = {
        'vi': """
        H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch chi ti·∫øt nh·∫•t c√≥ th·ªÉ t·ª´ ng·ªØ c·∫£nh ƒë∆∞·ª£c cung c·∫•p. ƒê·∫£m b·∫£o cung c·∫•p t·∫•t c·∫£ c√°c chi ti·∫øt.
        N·∫øu c√¢u tr·∫£ l·ªùi kh√¥ng c√≥ trong ng·ªØ c·∫£nh, h√£y n√≥i "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi trong ng·ªØ c·∫£nh", ƒë·ª´ng ƒë∆∞a ra c√¢u tr·∫£ l·ªùi sai.
        
        Ng·ªØ c·∫£nh:\n {context}?\n
        C√¢u h·ªèi: \n{question}\n

        Tr·∫£ l·ªùi:
        """,
        'en': """
        Answer the question as detailed as possible from the provided context. Make sure to provide all the details.
        If the answer is not in the provided context just say, "Answer is not available in the context", don't provide the wrong answer.
        
        Context:\n {context}?\n
        Question: \n{question}\n

        Answer:
        """,
        'default': """
        Answer the question as detailed as possible from the provided context. Make sure to provide all the details.
        If the answer is not in the provided context just say, "Answer is not available in the context", don't provide the wrong answer.
        
        Context:\n {context}?\n
        Question: \n{question}\n

        Answer:
        """
    }
    return prompts.get(detected_lang, prompts['default'])

def get_conversational_chain(detected_lang):
    prompt_template = get_prompt_by_language(detected_lang)
    model = ChatGoogleGenerativeAI(
        model="gemini-1.5-flash",
        temperature=0.3,
        max_output_tokens=450
    )
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

def process_pdf():
    try:
        raw_text = get_pdf_text(DEFAULT_PDF_PATH)
        text_chunks = get_text_chunks(raw_text)
        get_vector_store(text_chunks)
        return True
    except Exception as e:
        st.error(f"Error processing PDF: {str(e)}")
        return False

def user_input(user_question):
    detected_lang = detect_language(user_question)
    
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
    docs = new_db.similarity_search(user_question)
    chain = get_conversational_chain(detected_lang)
    response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
    st.write("Reply: ", response["output_text"])

def main():
    st.set_page_config("Chat PDF")
    st.header("Chat with PDF using GeminiüíÅ")
    
    # T·ª± ƒë·ªông x·ª≠ l√Ω PDF khi kh·ªüi ƒë·ªông
    if 'pdf_processed' not in st.session_state:
        with st.spinner("Processing PDF..."):
            if process_pdf():
                st.session_state.pdf_processed = True
                st.success("PDF processed successfully!")
            else:
                st.session_state.pdf_processed = False

    user_question = st.text_input("Ask a Question from the PDF File")

    if user_question:
        user_input(user_question)

    with st.sidebar:
        st.title("Menu:")
        if st.button("Reprocess PDF"):
            with st.spinner("Reprocessing..."):
                if process_pdf():
                    st.success("PDF reprocessed successfully!")

if __name__ == "__main__":
    main()